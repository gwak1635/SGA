#include "E05.h"

void E05()
{
    int aValue = 0;
    int bValue = 0;

    printf("반복할 횟수를 입력해 주세요 : ");
    scanf("%d", &bValue);

    // 기본적은 for의 형태
    for (int i = 0; i < bValue; i++)
    {
        printf("%d ", i);
    }
    printf("\n");
    
    // 기본적인 for의 형태가 아니더라도 초기절, 조건절, 반복절만 있다면
    // for는 실행된다.
    // 초기절은 그저 for가 실행될때 한번 실행되는 부분에 불과하고
    // 조건절도 0이냐 0이 아니냐만 확인하는 부분이며
    // 반복절은 다시 조건을 확인전에 실행될 부분일 뿐이다.
    for (aValue += 10; !aValue && bValue; aValue = bValue)
    {

    }
    aValue = 0;

    // aValue가 bValue가 작다면 계속해서 반복
    while (aValue < bValue)
    {
        // while문을 사용할땐 반드시 내부에서 조건을 깨줄수 있는 코드가 필요하다.
        aValue++;
        printf("%d ", aValue);
    }
    printf("\n");
    
    aValue = 0;
    while (aValue < bValue)
    {
        // 2로 나눴을때 나머지가 1인경우 == 홀수
        if (aValue % 2 == 1)
        {
            printf("%d ", aValue);
        }

        aValue++;
    }
    printf("\n");

    aValue = 0;
    while (aValue < bValue) // 짝수일때 건너뛰는 코드 
    {
        // 2로 나눴을때 나머지가 0인경우 == 짝수
        if (aValue % 2 == 0)
        {
            // 컨티뉴 키워드는 더이상 아래의 내용을 실행하지 않고
            // 다음 코드의 흐름으로 이동시키는 키워드
            // 반복문이라면 반복절로 아니라면 그냥 다음 코드위치로
            aValue++;   // aValue를 증가하는것도 스킵하니 추가로 입력
            continue;
        }
        printf("%d ", aValue);
        aValue++;
    }
    printf("\n");

    aValue = 0;
    while (aValue < bValue) // 5까지만 출력한다
    {
        printf("%d ", aValue);
        if (aValue == 5)
        {
            // 반복문에서 break를 사용할경우
            // 해당 반복문을 끝내고 밖으로 나가는 기능을 해준다.
            // 쉽게말해 더이상 반복할지 말지를 계산하는게 아닌
            // 당장 그만두고 나간다는 이야기다.
            break;
        }
        aValue++;
    }
    printf("\n");

    aValue = 0;
    do // while(aValue > bValue)
    {
        printf("Do ~ While은 반드시 한번은 실행한다!\n");
    } while (aValue > bValue); // 기본적으로 aValue는 0이므로 클수가 없음
    // do ~ while은 한번 실행후 조건이 거짓이라면 더이상 실행하진 않는다.
}

/*
과제! 전투 시뮬레이션 만들기

조건1. 플레이어, 몬스터의 스텟 만들기
조건1_1. 기본 스텟은 체력, 공격력, 방어력

조건2. 플레이어와 몬스터는 한쪽의 체력이 0이 될때까지 전투
조건2_1. 데미지는 공격력 - 방어력으로 계산
조건2_1. 만약 방어력이 더 크다면 0으로 계산

조건3. 한쪽의 체력이 0이되어 게임이 끝날때 승자가 누구인지 출력하기
조건3_1. 비겼을 경우(플레이어와 몬스터가 둘다 죽었을경우) 플레이어의 승리로 판정

=== 여기까지 난이도 : 하

추가 조건1. 플레이어와 몬스터의 스텟을 입력해서 받기
추가 조건1_1. 입력받은 스텟을 그대로 플레이어와 몬스터의 스텟에 집어넣기

추가 조건2. 플레이어와 몬스터의 전투 내용 출력하기 
추가 조건2_1. 공격,방어 등 전투 상황 출력하라는 뜻

추가 조건3. 전투를 최대 3회 진행하여, 2회 승리한 사람 표시하기
추가 조건3_1. 전투가 다시 시작될때 패배한 사람의 체력은 회복, 승자는 유지
추가 조건3_2. 만약 승승 으로 한쪽이 먼저 2회 승리시 3번째 전투는 하지 않음
// 3판 2선

=== 여기까지 난이도 : 중

하드 조건1. 플레이어와 몬스터의 스텟에 회피, 치명타 확률, 치명타 배율 추가하기
하드 조건1_1. 회피 스텟의 확률에 따라 피격시 데미지를 받지 않음 // Miss 뜸
하드 조건1_2. 치명타 확률 스텟에 따라 공격시 데미지를 치명타 배율만큼 추가하기

하드 조건2. 상황 출력 문구 추가하기
하드 조건2_1. 회피와 치명타도 상황에따라 알려주기
하드 조건2_2. 현제 남은 체력과 그외의 스텟들도 출력하기

=== 여기까지 난이도 : 상

기한 : 2024_01_31 일까지 // 다음 수업 시작때까지
*/