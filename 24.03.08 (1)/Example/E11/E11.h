#pragma once

#include "../Define/GlobalDefine.h"

/*
포인터는 메모리상에 존재하는 다양한 주소를 가리키고
있는 변수를 말한다.

포인터는 특정 주소를 가져와 그 주소에 존재하는 변수
및 함수등의 값을 변경하는것이 가능하다.

포인터를 사용할때 일반적으로 자료형 뒤에 *(포인터 연산자)를
입력하는 방식으로 사용할수 있으며,
이때, 해당 포인터에 특정 데이터의 주소를 넣어주기 위해서는
해당 데이터 앞에 &를 붙여서 넣어줘야 한다.

&가 어디있는지는 모르지만 누구인지는 알기때문에 원본을 가져올
수 있었다면,
*는 반대로 누구인지는 모르지만 어디있는지 알수있기 때문에
원본에 접근할수 있다.

그렇기에 *에 데이터의 주소를 넣기 위해서는 먼저 &로 해당
데이터를 찾아와야 하는것이다.

만약에 주소를 나중에 넣어주기 위해서 만든 포인터 라면
초기값으론 nullptr 이라는것을 넣어줘야 한다.

포인터는 주소를 가지고 있는 변수이기 때문에 아무것도
넣어주지 않을경우 메모리상에 이상한 주소를 가져올수 있기
때문에 당장 사용하지 않거나 사용했다가 지울때는
nullptr을 넣어주도록 하자

이렇게 포인터에 데이터 주소를 넣었다면 해당 데이터를
꺼내서 사용할때도 앞에 *을 붙여줘야 한다.
이때 사용하는 *은 포인터 연산자가 아니라 역참조 연산자라
부른다.

하지만 배열같은 경우는 기본적으로 해당 배열이 가지고있는
요소들에 접근할때 이미 자동으로 포인터를 사용해 왔기 때문에
역참조를 사용하지 않고(그렇기에 함수에 배열을 그냥 넣어도
원본의 값이 바뀜)

struct나 class의 경우 내부에 접근하기 위한
맴버 지정 연산자가 기존의 . 에서 ->로 바꾸는 방식으로
만들었기에 역참조 연산자를 사용하지 않는다.
또한 class는 자기 자신의 메모리 주소를 반환하는 this라는
키워드 또한 가지고 있다. // this->aValue;

함수 또한 포인터를 통해 해당 함수가 있는 주소를 반환시켜
해당 함수를 변수처럼 사용할수가 있지만 이는 매우 불안정한
구조이기도 하고, 나중에 다양한 엔진에서 사용하는 
함수 포인터와 구조가 다를 가능성 또한 높기 때문에 
존재한다는 거만 알고 넘어가자

포인터는 기본적으로 해당 데이터를 직접 가져오는게아니라
해당 데이터가 있는 주소를 가져오는거다 보니 구조가 복잡하고
사용하기도 까다롭지만,

게임 같이 매우 많은 데이터들이 서로 상호작용을 하며
진행되는 프로그램같은 경우 해당 데이터들이 서로 데이터를
주고받는 과정에서 최대한 빠른 연산을 해야 하기 때문에

포인터를 쓸수밖에 없다.

이러한 포인터가 메모리상에 주소를 가져오는 변수라면
이런 포인어의 메모리상의 주소를 가져오는것도 가능할것이다.

포인터의 주소를 가지고있는 포인터를 다중 포인터라 부르고
포인터가 겹쳐져있는 갯수에따라, 더블 포인터, 트리플 포인터
등등으로 부르기도 한다.

포인터에 포인터를 저장하고싶다면 *을 원하는 만큼 붙여주면
된다.

// int* a == int형 주소를 가질수있는 a
// int** b == int형 주소를 가지고있는 포인터를 가질수있는 b

하지만 이러한 다중포인터는 일반적으로 사용할 일이 없는데,
사용되는 경우는 특정 포인터를 요구하는 함수를 다른 함수
내부에서 사용하기 위해서는 다중 포인터로 가져와야한다.

// void AFun(int** a) <- 내부에서 int*를 요구하는 함수를
사용한다는것을 유추할수 있음

포인터는 일반적으로 사용할때 해당 포인터가 가지고있는
주소에 있는 데이터를 반환하기 때문에 포인터를 내부에서
사용하고싶다면 포인터를 반환하는 변수가 필요한것이다.
*/

class E11
{
public:
    E11();
    ~E11();

    int* GetAValuePtr() { return aValuePtr; }
    void SetAPTr(int* aPtr) { this->aValuePtr = aPtr; }
    float* GetBValuePtr() { return bValuePtr; }
    void SetBPTr(float* bPtr) { this->bValuePtr = bPtr; }

    int** GetCValuePtrPtr() { return cValuerPtrPtr; }
    void SetCPtr(int** cPtr) { this->cValuerPtrPtr = cPtr; }

    void PrintDPtr(int** dPtr);
    void PrintPtr(int* ptr);

private:
    int* aValuePtr = nullptr;
    float* bValuePtr = nullptr;
    
    int** cValuerPtrPtr = nullptr;
};