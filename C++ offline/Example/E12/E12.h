#pragma once

#include "../Define/GlobalDefine.h"

/*
이전에 설명한 캡슐화와 추상화 말고 클래스가 가지고 있는 특징으로 상속과
다형성도 존재한다.

상속은 특정 클래스간에 공통되는 속성(변수) 및 기능(함수)를 하나의 클래스에 
구현한뒤 해당 클래스를 공유하는 기능을 의미한다.

예를들어 몬스터와 플레이어가 전부 이동과 공격을 가지고 있다면, 이동과 공격을
가지고있는 캐릭터 라는 클래스를 만들어 해당 캐릭터를 몬스터와 플레이어가
상속받는 형식으로 만들어진다는 것이다.

이러한 방식으로 상속관계인 클래스들을 부모 - 자식 관계를 형성했다고 부르며

C++은 기본적으로 모든 클래스가 모든 클래스를 상속받아 사용하는 것이 가능하지만

일반적인 관점에서 상속은 is a (A is B)관계가 형성되는 구조만 사용하는 편이다.

하나의 클래스가 여러개의 클래스를 상속받는 것도 가능한데 이 경우 거의 모든
프로그램에서 에러가 발생하고 심각하면 만들어논 자료구조를 박살내는 경우가 발생하는
통칭 죽음의 다이아몬드 관계가 형성되기 때문에 다중 클래스를 상속받는건 가능한
피하는게 좋다.

이렇게 상속받은 자식 클래스는 부모 클래스의 protected 영역까지의 데이터를 가져와
사용한는 것이 가능하다 // private 못 가져온다.

상속관계인 클래스들중에서 부모 클래스는 다형성을 이용해 자식의 클래스의 모습을
취할수 있다.

다형성을 이용해서 부모가 자식의 모습을 취한다 한들 본질적으론 부모 클래스이기 때문에
부모와 자식이 모두 가지고있는 함수가 있다고 하면 우선적으로 부모 클래스의 함수를
사용할려 한다.

만약 이때, 부모 클래스가 아닌 자식 클래스가 가지고 있는 함수를 사용하게 만들고
싶다면 부모 클래스의 해당 함수 앞에 virtual 붙여서 해당 함수를 가상 함수로
만들어주면 된다.

가상 함수는 이름그대로 함수가 있지만 가상으로 처리되는 함수로, 일반적인 사용에서는
문제가 없지만 다형성을 통해 자식의 모습을 하고 있는 클래스가 가상 함수를 사용하면
자신이 가지고 있는걸 건너 뛰고 자식이 가지고있는 함수를 사용하게 만들 수 있다.

또한 이러한 가상 함수를 구현 없이 = 0 해서 마무리 할경우 구현이 없고 이름만 존재하는
가상 함수를 만들 수 있는데 이러한 함수는 순수 가상 함수 라고 부른다.

순수 가상 함수를 가지고있는 클래스는 기본적으로 객체의 생성이 불가능하며, 반드시
상속을 통해 해당 함수를 자식 클래스에 건내주고 해당 자식 클래스가 구현을 해줘야
클래스의 구현이 가능하다.

다르게 말하면 자식클래스에서 해당 순수 가상 함수를 구현하지 않으면 해당 자식 
클래스도 똑같이 구현이 불가능하다.
*/

class Animal
{
public:
    Animal();
    ~Animal();

    void PrintAValue();
    virtual void PrintBValue();

    virtual void SetAValue(int aValue) { this->aValue = aValue; }
    virtual void SetBValue(int bValue) { this->bValue = bValue; }

protected: //자식도 사용가능한 데이터
    int aValue = 0;
    int bValue = 0;
};

// : public 클래스명 클래스 상속 선언 <퍼블릭 말곤 쓸일없음>
class Cat : public Animal {
public:
    Cat();
    ~Cat();

    void PrintAValue();
    virtual void PrintBValue() override final;//오버라이드 시 변수명 반환값 매개변수가 같아야 한다! //final이 걸려있으면 자기 이후로는 이걸 쓰지 않음을 명시
    //Ex: 고양이과가 박스를 좋아한다는 것을 고양이과 아래의 것들에게 각각 적용할 필요가 없으므로 final 선언함
    //virtual을 지워도 final을 붙인 것과 같은 기능을 함(내려갈 문 없앰)
    //부모 틀 안에 자식을 넣을 때 부모를 쓰고싶으면 버추얼 없이, 자식을 쓰고 싶으면 버추얼로!
};

class E12
{
public:
    E12();
    ~E12();
};