#include "E07.h"

void E07()
{
    // 문자열은 해당 문자열이 끝났다는 것을 표시해줄
    // '\0'(널 문자)가 필요하다.
    char aString[100] = {'A','B','C','D','\0'};

    // ""를 이용해 문자들의 집합체 즉, 단어나 문장을 집어넣으면
    // 자동으로 맨 마지막에 \0이 들어간다.
    char bString[100] = "abcd";

    printf("문자열 A : %s\n", aString);
    printf("문자열 B : %s\n", bString);

    // string은 char 배열과 다르게 크기를 명시하지 않아도
    // 자동으로 크기를 측정해 넣어준다.
    string cString = "Hello";

    // string으로 만든 문자열의 데이터를 꺼내기 위해서는
    // 해당 문자열을 선언한뒤 뒤에 .c_str()를 사용해 줘야한다.
    printf("문자열 C : %s\n", cString.c_str());

    // char 배열의 경우 우리가 배열의 크기를 선언하기 때문에
    // 필요한 만큼의 메모리를 받아오는것이 가능하지만
    
    // string의 경우 내부적으로 char 배열의 역할을 하는 기능이
    // 들어있는거이기 때문에, 크기는 고정값으로 40이 들어있다.

    // 만약 40보다 큰 메모리를 사용해야 한다면, string이
    // 좀더 이득일수 있다.
    printf("문자열 A 크기 : %d\n", (int)sizeof(aString));
    printf("문자열 B 크기 : %d\n", (int)sizeof(bString));
    printf("문자열 C 크기 : %d\n", (int)sizeof(cString));

    char lString[100] = "Hello";
    char rString[100] = "World";

    // strcpy는 좌항(앞에 넣은)에 있는 문자열의 데이터에
    // 우항(뒤에 넣은)에 있는 문자열의 데이터를 덮어 씌우는 기능이다.
    // 즉, 원본의 데이터는 사라지고 새로 넣은 데이터만 보존된다.
    strcpy(lString, "World"); // 값을 바꿈 // =  (할당 연산자)

    // strcat은 좌항에 있는 문자열의 데이터에
    // 우항에 있는 문자열의 데이터를 이어 붙이는 기능이다.
    // 즉, 원본의 데이터 뒤에 추가로 입력한 데이터가 추가된다.
    strcat(rString, "Hello"); // 값을 추가 // += (추가 할당 연산자)

    printf("L문자열 : %s\n", lString);
    printf("R문자열 : %s\n", rString);

    // strlen은 문자열에 마지막 \0(널문자)를 제외한 나머지 문자의
    // 개수를 반환시켜주는 기능이다.
    printf("L문자열 길이 : %d\n", (int)strlen(lString));
    printf("R문자열 길이 : %d\n", (int)strlen(rString));

    // strcmp는 두개의 문자열이 같은지 아닌지를 비교하는 함수인데,
    // 내부적인 구조가 각각의 문자열을 유니코드로 변환시켜
    // 문자마다 가지고있는 유니코드상의 번호를 나열한뒤
    // 왼쪽의 문자열에서 오른쪽의 몬자열을 뺀다(숫자적으로)
    // Ex) strcmp(ABC, BCD) == 656667 - 666768 <- 이렇게 계산함
    // 값이 0이 나오면 두개의 문자열은 서로 같다는거고
    // 만약 -가 나온다면 왼쪽이 더 유니코드 상으로 숫자가 작던가 길이가 짧고
    // +가 나온다면 왼쪽이 유니코드 상으로 숫자가 크던가 길이가 길것이다.
    // 같은지 아닌지 확인하는 용도라면 0인지 아닌지만 확인하면 된다.
    printf("문자열 비교 : %d\n", strcmp(lString, rString));

    // strchr과 strstr은 좌항에 넣은 문자열에서 우항에 넣은 데이터가
    // 있는지를 확인하는 함수들이다.
    // 기본적으로 있다면 해당 위치를(문자열의 번호) 가리키는 포인터를 반환하고
    // 없다면 NULL이란것을 반환하기 때문에 결과값에다가 NULL인지 아닌지
    // 확인하는 비교 연산자를 넣어서 있는지 없는지 확인할수 있다.
    // 이번 결과를 통해 문자열은 대문자와 소문자를 구분한다는것을 알수있다.
    printf("문자열에서 문자 찾기(R) : %d\n",
        strchr(lString, 'R') != NULL);
    printf("문자열에서 문자열 찾기(ldH) : %d\n",
        strstr(rString, "ldH") != NULL);

    // _strrev는 문자열을 반전시키는 (뒤집는)기능이다.
    printf("문자열 반전! : %s\n", _strrev(lString));

    // _strlwr 와 _strupr는 각각 문자열을 소문자나 대문자로 바꾸는 기능이다.
    printf("문자열 소문자 변환 : %s\n", _strlwr(lString));
    printf("문자열 대문자 변환 : %s\n", _strupr(rString));

    // scanf와 cin은 스페이스바 즉, 공백을 기준으로 읽어들일 데이터를
    // 구분하기 때문에 스페이스바가 포함된 문자열을 받아올수 없다.
    printf("\n문자열 입력해 주세요 : ");
    scanf("%s", &aString);
    printf("입력받은 문자열 : %s\n", aString);

    // getchar는 메모리상에 있는 문자 하나를 가져오는 기능을 해준다.
    // 메모리상에 문자가 없다면 입력받은 뒤 반환한다.
    // 이러한 특징을 이용해 문자열이나 데이터를 입력한뒤 엔터치면 남는
    // \n문자를 메모리에서 가져와 허공에 반환시켜 \n문자가
    // 원하지 않은곳에 들어가는것을 방지할수있다.
    getchar();

    // 데이터를 입력받을때 스페이스바를 받아오지 못하는 이유는
    // 콘솔창과 프로그램이 데이터를 주고받는 과정에서
    // 프로그램이 콘솔창에서 건내준 스페이스바를 구분점으로 사용하기 때문이다.

    // 그렇기에 만약에 프로그램에 도착하기 전에 있는
    // 즉, 프로그램과 콘솔창의 데이터가 오가는 통로에 직접 접근해
    // 데이터를 가져온다면 스페이스바가 포함된 문자를 받아오는것도
    // 가능하다. // 즉, 우리는 수송차를 털것이다.

    // fgets함수는 데이터가 오가는 통로 즉, 스트림에 접근해주는 함수이며,
    // 우리가 데이터를 입력받는 통로는 stdin
    // 데이터를 출력하는 통로는 stdout이라 부른다.
    printf("\n스페이스바 포함된 문자열 입력 : ");
    fgets(aString, sizeof(aString), stdin);

    // fgets가 스트림에서 데이터를 가져오는 함수라면
    // fputs는 스트림에 데이터를 출력하는 함수인데 쓸모는 없다.
    fputs("문자열 입력 결과 : ", stdout);
    printf("%s", aString);
}

/*
과제! 사전 만들기

조건1. 문자열 배열 만들기
조건1_1. 문자열의 최소 크기는 10으로 지정
조건1_2. 배열의 최소 크기는 10으로 지정

조건2. 1번 입력후 문자열 입력시 문자열 배열에 추가됨
조건2_1. 배열의 모든 칸에 문자열이 들어있을시 추가되지 않음 // 메세지 표시

Ex)
1. 문자열 추가
행동을 입력하세요 : 1
추가할 문자열을 입력해 주세요 : Apple // 배열에 Apple이 추가됨

조건3. 2번 입력시 배열에 들어있는 문자열들 전부 출력

Ex)
1. 문자열 추가 , 2. 문자열 출력
행동을 입력하세요 : 2
입력받은 문자열 리스트 : 
Apple
Banana
Kiwi
Cat

======================== 여기까지 난이도 : 하

추가 조건1. 3번 입력시 배열에 들어있는 문자열 정렬하기 (사전순)

Ex)
1. 문자열 추가 , 2. 문자열 출력 , 3. 배열 정렬
행동을 입력하세요 : 3
정렬된 문자열 리스트 :
Apple
Banana
Cat
Kiwi

추가 조건2. 4번 입력시 배열 초기화
추가 조건2_1. 값이 없는 배열은 출력하지 않음

======================== 여기까지 난이도 : 중

하드 조건1. 한글 데이터 입력받아 배열에 집어넣기
// 한글의 바이트수가 크기때문에 문자열 크기를 키워야 할수도 있음

하드 조건2. 한글 데이터 정렬하기 (사전순)
// 가나다 순

======================== 여기까지 난이도 : 상
*/