2D 기준
Input Assember
// IA / 인풋 어셈블러

- 그림을 그리위한 정보들을 건내주는 단계
- CPU가 GPU한테 필요한 데이터를
건내주는 단계

Vertex Shader
// VS / 버텍스 쉐이더

- 그림의 폴리곤의 꼭짓점의 데이터를 가지고
해당 꼭짓점의 정보를 그려주는 단계
- 정점을 그리는 단계

Resterizer
// RS / 레스터 라이저

- VS를 통해 정해진 정점들을 서로 이어주며,
필요한 픽셀들을 자동으로 만들어주는 단계
- 선을 긋고 면을 체우는 단계

Pixel Shader
// PS / 픽셀 쉐이더

- RS를 통해 깔린 픽셀들의 색을 정하는 단계
- 실질적인 그림을 그리는 단계

Output Merger
// OM / 아웃풋 머저

- PS까지 끝난 픽셀들을 한곳에 모아 적절한
위치에 배치시킨뒤 출력하는 단계
- 그림을 출력하는 단계

API: 콘솔로 모든걸 할 때 유저 친화적으로 만든 함수
기계어->어셈블리어->프로그래밍 언어->API

마소가 개발한 API인 DirectX. 2D, 3D를 표현하기 편하게 만들어야 함.
빛->물체->카메라의 과정이 똑같이 구현되어 있음[고성능]

렌더 오브젝트(우측) 변수의 타입
(좌측): 자원
중앙: 과정
1. 정점의 위치(Vector3)를 만들고[인풋 어셈블러], 그림[버텍스 쉐이더
2. 정점을 인덱스화시켜서 [버텍스 쉐이더] 연결시킴[래스터라이저]
4. 단면을 잘라서 그 안에 있는 물건들만 보여줌 [래스터라이징]
5. 픽셀 셰이더:한 픽셀씩 검사를 해서 칠해줌.

uv: 캐릭터의 동작 여러개가 있는 이미지 파일의 시작을 정규화(0,1)에서 이미지를 잘라 씀.
Rect에 표시되는 경우 Rect의 크기만큼 줄이거나 늘림.
캐릭터의 동작 여러개가 아니라 하나의 파일로 만들어 UV를 하는 이유는, 할당, 해제가 복잡하기 때문에 최적화를 위한 것

